class Solution:
    def countAndSay(self, n: int) -> str:
        """
        Generate the nth term of the count-and-say sequence.

        The count-and-say sequence is generated by reading the previous term
        and describing what you see (count of consecutive identical digits).

        Args:
            n: The term number to generate (1-indexed)
        
        Returns:
            The nth terms of the count-and-say sequence as a string
        """
        if n <= 0:
            return ""
        
        current = "1"

        for _ in range(n - 1):
            current = self._describe_sequence(current)
        
        return current

    def _describe_sequence(self, sequence: str) -> str:
        """
        Generate the next term by describing the current sequence.

        Args:
            sequence: Current sequence string
        
        Returns:
            Next sequence term
        """
        return ''.join(str(len(list(group))) + digit for digit, group in groupby(sequence))